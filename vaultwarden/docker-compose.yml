name: vaultwarden
services:
  postgres:
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges
    environment:
      TZ: Europe/Berlin
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      interval: 10s
      retries: 30
      start_period: 10s
      test: pg_isready -h 127.0.0.1 -p 5432 -U $$POSTGRES_USER -d $$POSTGRES_DB
      timeout: 5s
    image: docker.io/library/postgres:17.3-alpine3.20
    restart: unless-stopped
    user: "999:999"
    volumes:
      - type: bind
        source: ${VOLUME_DB_SRC}
        target: ${VOLUME_DB_DST}
        read_only: false
    networks:
      - vaultwarden

  vaultwarden:
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DOMAIN: ${DOMAIN}
      TZ: Europe/Berlin
      ADMIN_TOKEN: "${ADMIN_TOKEN}"
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
      WEBSOCKET_ENABLED: "true"
      SIGNUPS_ALLOWED: "false"
    healthcheck:
      interval: 10s
      retries: 30
      start_period: 10s
      test: /healthcheck.sh
      timeout: 5s
    image: vaultwarden/server:1.33.2
    restart: unless-stopped
    user: "568:568"
    volumes:
      - type: bind
        source: ${VOLUME_DATA_SRC}
        target: ${VOLUME_DATA_DST}
        read_only: false
    networks:
      - vaultwarden
      - reverse-proxy

networks:
  vaultwarden:
  reverse-proxy:
    external: true
    name: reverse-proxy
